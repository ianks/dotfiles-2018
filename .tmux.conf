# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal "screen-256color"

# Set prefix to Ctrl-Space
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# Create splits and vertical splits
bind-key v  split-window -p 50 -h -c "#{pane_current_path}"
bind-key ^V split-window -p 50 -h -c "#{pane_current_path}"
bind-key s  split-window -p 50 -c "#{pane_current_path}"
bind-key ^S split-window -p 50 -c "#{pane_current_path}"

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of vim splits.
# Source: https://github.com/christoomey/vim-tmux-navigator
# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# set first window to index 1 (not 0) to map more to the keyboard layout...
set-option -g base-index 1
set-window-option -g pane-base-index 1

# Linux safe patch for OS X pbpaste and pbcopy under tmux.
set-option -g default-command "bash $HOME/.yadr/bin/safe-reattach-to-user-namespace -l $SHELL"

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "bash $HOME/.yadr/bin/safe-reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "bash $HOME/.yadr_config/bin/safe-reattach-to-user-namespace pbcopy"

# No escape time for vi mode
set -sg escape-time 0

# Bigger history
set -g history-limit 10000

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# Force a reload of the config file
unbind r
bind r source-file $HOME/.tmux.conf \; display "Reloaded!"

# Status bar
if-shell "[ -f $HOME/.tmux.conf.status-bar ]" 'source $HOME/.tmux.conf.status-bar'

# Local config
if-shell "[ -f $HOME/.tmux.conf.user ]" 'source $HOME/.tmux.conf.user'
